----------------------------------------------------------------------------
                            The assembler:
----------------------------------------------------------------------------

    Translates written Janus assembly code into machine instructions
    for the VM.

    This will be done in phases:

        - Lexical analysis and parsing (two-pass)
        - Semantic analysis
        - Machine instruction emission

    Components of an assembly source file:
        - A typical source line is of the form:
            LABEL MNEMONIC OPERAND(S) COMMENT
        - Exceptions: empty lines, comment lines


----------------------------------------------------------------------------
                           Instruction layout:
----------------------------------------------------------------------------

   +-----------+-------+--------+---------+---------+---------+---------+
   | 9b OPCODE | 1b SZ | 4b PAD | 2b TYPE | 2b TYPE | 7b OPND | 7b OPND |
   +-----------+-------+--------+---------+---------+---------+---------+

     * 'b' meaning 'bits'


    - The OPCODE is defined by the instruction set.
    - The SZ refers to the size of the operation (0 = 32-bit, 1 = 8-bit).
    - The PAD is 4 bits of padding.
    - The two TYPEs refer to the types of the following operands (there
      are 4 types in total).
    - The two OPNDs are the operands.


----------------------------------------------------------------------------
                               Assembling
----------------------------------------------------------------------------

    Two passes: the first pass will keep track of labels (and perhaps
    store information about instructions in an intermediate file). The
    second pass will perform the assembly.

    If using an intermediate file, records will be held as such:
     - Record type [instruction, directive, comment, invalid line]
     - LC value for the line
     - Pointer to an entry in the opcode or directive table
     - A copy of the source line itself

    The assembler keeps track of its location in the program with a
    location counter (LC), and keeps track of symbols with a symbol
    table.

    Each entry of the symbol table contains: name, value, and type
    of a symbol.


